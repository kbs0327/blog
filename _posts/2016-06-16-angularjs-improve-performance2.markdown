---
layout: article
title: "크롬 Timeline을 이용한 AngularJS 2차 성능개선"
date: 2016-06-16 21:07:13
image:
  teaser: angularjs.png
categories: technology
---

# 개요

이 글은 AngularJS의 웹 어플리케이션 성능개선을 진행한 방법을 정리한 글입니다. 맥 크롬 기반으로 글을 작성했습니다.  
- AngularJS v1.5.7 기준으로 작성되었습니다.  

이번 글은 저번처럼 딱딱하지 않게 쓰겠습니다.  

 [AngularJS 1차 성능개선](http://kbs0327.github.io/blog/technology/angularjs-improve-performance/) 글을 쓴지 벌써 5개월 정도가 지났습니다. 그 동안은 성능에 대한 개선보다는 기능의 추가에 관해서 주로 일을 해서 성능개선을 할 시간이 없었네요...(딱히 성능개선을 어떻게 해야할 지 아이디어가 떠오르지 않았습니다.)   
 저는 [두레이](http://dooray.toast.com/)라는 협업서비스를 개발 중인데요.. 기능을 열심히 추가하다보니 `읽기 창의 속도가 느려요`라는 바구니(우리팀에서는 별명으로 호칭합니다.)의 말과 함께 성능개선을 다시 시작하게 되었습니다. 이 때에는 성능개선을 할 시간이 별로 없었기에 어떻게 성능을 개선할지를 고민하게 되었습니다. 그러다가 크롬 개발자 도구에 있는 Timeline기능을 처음 사용하여 성능병목 찾기 및 개선지점을 찾아서 개선하기로 했습니다.  

## 크롬 개발자도구 Tiemline  

 두레이 서비스는 지금 크롬에서 주로 개발하고 있는데요.(현재는 크롬만 지원하고 있습니다...) 그래서인지 개발자도구를 참 많이 사용하고 있습니다. 하지만 잘 사용하지 않는 미지의 탭이 몇개 있었는데, 그 중 하나가 Timeline 탭이었습니다.  

 timeline 탭은 아래 화면처럼 생겼는데 처음보면 이게 뭔지... 어떻게 사용해야하는지 막연한 생각이 듭니다.  

<figure>
	<a href="//kbs0327.github.io/blog/images/timeline_empty.jpg"><img src="//kbs0327.github.io/blog/images/timeline_empty.jpg"></a>
	<figcaption>타임라인</figcaption>
</figure>

 일단 화면 구성을 보면 위에 버튼들이 몇개 보이고, 아래에는 빈 화면만 보입니다. Capture 체크박스는 아래의 화면에 어떤 내용을 노출할 것인지를 설정하는 버튼입니다.  

 - JS Profile: 시간의 흐름 별로 함수의 콜스택을 자세히 보여줍니다.  
 - Memory: 서비스가 시간의 흐름 별로 메모리를 얼마나 사용하고 있는지를 보여줍니다.  
 - Paint: 이미지와 관련된 내용이 보인다고 하는데 사용 안해봤습니다..  
 - Screenshots: 시간 별로 화면이 어떻게 보이는지 스크린샷들을 보여줍니다.(현재가 어느정도인지 알기 쉽습니다.)  

 그리고 가장 왼쪽에서부터 녹화 버튼(Cmd+E), 취소버튼, 실행중 가비지 컬렉션을 강제로 시켜주는 버튼입니다.  

 녹화 후에 화면을 마우스로 휠, 끌기 등을 해보면 다양한 형태의 뷰를 볼 수 있습니다.  
 그리고 화면을 클릭하면 선택한 콜스택의 detail한 정보가 아래에 표시됩니다.  

 나머지는 직접 사용하면서 익혀보시면 생각보다 쉽게 익힐 수 있습니다. 그리고 Timeline 탭에서 Cmd + R을 누르면 화면이 새로고침되며, 새로고침하는 동안의 메모리를 녹화합니다.(시간이 지나면 자동으로 꺼집니다.)  

## 성능 개선  

 위의 Timeline을 이용하여 아래와 같은 결과가 나왔습니다.  

<figure>
	<a href="//kbs0327.github.io/blog/images/timeline_full.jpg"><img src="//kbs0327.github.io/blog/images/timeline_full.jpg"></a>
	<figcaption>타임라인 측정 후 화면</figcaption>
</figure>

 소스가 압축하지 않아서 로딩속도가 느리지만 이 부분은 빌드하면 개선될 부분이어서 무시하겠습니다.  
 크게 3개의 탑이 눈에 띄는데 이 중 첫번째는 Angular bootstrap 부분이고, 이 부분을 개선하기에는 개선할 시간이 부족했고, 3번째 탑은 화면이 보인 이후에 나오는 부분이어서 개선해도 별로 티가 안나는 부분입니다. 그래서 2번째 탑을 개선하기로 했고 이부분을 확대해서 개선부분을 찾았습니다.  

<figure>
	<a href="//kbs0327.github.io/blog/images/timeline_expansion.jpg"><img src="//kbs0327.github.io/blog/images/timeline_expansion.jpg"></a>
	<figcaption>타임라인 측정 후 화면</figcaption>
</figure>

 3개의 개선 포인트를 찾았는데요. 왼쪽부터 차례대로 어떤 부분인지 알아보겠습니다. 

 - 먼저 첫번째 부분은 이미 다른 방식으로 처리하고 있어서 없어져야하는 레거시 코드였습니다. 그래서 이 부분은 제거하기로 했습니다.  
 - 2번째 부분은 업무의 상태를 로컬스토리지에 저장하는 부분으로 개인정보여서 암호화도 병행하고 있어서 느렸습니다. 이 부분은 뷰가 로딩되고 난 후에 실행되도 괜찮아서 이 부분은 뷰로딩 이후에 실행되게 수정하기로 했습니다.  
 - 3번째 부분은 댓글을 쓰는 에디터들을 로딩하는 부분입니다. 업무를 볼 때 가장 중요한 것은 업무 내용이 보이는 것이고 에디터는 조금 늦게(1초 이내) 로딩되어도 크게 문제가 없어서 이 부분도 뷰로딩 이후에 실행되게 수정했습니다.   

## 결과  

 위의 개선과 병행하여 $watch를 수정하는 작업을 진행했더니 평균 2.2초 정도의 속도에서 1.7초 정도로 0.5초 정도의 속도를 개선했습니다.  
 일반적으로 직관에 의해 병목으로 의심되는 부분을 개선하는 것도 속도를 빠르게 할 수 있지만 Timeline을 이용하면 실제로 병목구간을 쉽게 파악할 수 있고 적은 노력에도 이전의 성능개선보다 더 효율적인 성능개선을 할 수 있었습니다.  

 다음에는 $rootScope.$digest 수를 줄여서 성능개선을 시도했던 내용과 메모리 누수 확인 및 원인 해결 과정을 순서대로 기술하겠습니다.  

# 참고자료  

[크롬 개발자도구 Timeline](https://developer.chrome.com/devtools/docs/timeline)  
